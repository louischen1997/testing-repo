# Expose this solution as a Murano service and enable solution-to-solution communication
# Doc: http://docs.exosite.com/reference/services/interface

name: my custom service # Can be modified by user, as whitelisted in the options.safeConfigs in the murano.yaml file.

# type: P # If the exposed service is an IoT-Connector Product, Eg. Cloud-2-Cloud

parameters:
# Configuration settings automatically displayed on the consumer solution service configuration page.
  - name: token
    # type: string by default
    # An example configuration parameters to be provided by consumer settings
    # In general security parameter goes here to avoid being sent from scripting
    # See below usage in the 'myOp' 'token' parameters
    maxLength: 200
    description: |
      Here goes the description of the 'token' parameter available in subscribers auto-generated documentation

operations:
# Operations exposed to the subscribers
# The logic executing the operations needs to be defined in the interface_<operation name> event handlers
- name: myOp
  # This can be called by subscribers with <Servicename>.myOp({ data = "hi" })
  # The script handling this call is done in the interface myOp.lua handler.
  description: |
    Here goes the 'myOp' operation description available in subscribers auto-generated documentation
  parameters:
    type: object
    description: payload
    required:
      - data
    properties:
      data:
        # Parameter required to be provided from scripting call
        type: string
        description: some user data
      token:
        type: string
        x-exosite-restricted: true # -> Cannot be provided from scripting
        # This parameter as matching the 'token' parameters defined above will
        # automatically used the configuration value and doesn't need to be provided from scripting
        description: |
          As 'x-exosite-restricted: true' the description here will not be displayed
      message:
        type: string
        description: Some message

events:
- name: myEvent
  # Event to subscribers, sent with:
  # Interface.trigger({event = "myEvent", data = "..."})
  #
  # In this template triggered in 'scripts_asyncJob.lua' & 'endpoints/interface.lua'
  description: |
    Here goes the description of the 'myEvent' event available in the subscribers auto-generated documentation
